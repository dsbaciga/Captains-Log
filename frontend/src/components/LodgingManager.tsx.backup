import { useState, useEffect, useId } from "react";
import type { Lodging, LodgingType } from "../types/lodging";
import type { Location } from "../types/location";
import lodgingService from "../services/lodging.service";
import toast from "react-hot-toast";
import AssociatedAlbums from "./AssociatedAlbums";
import JournalEntriesButton from "./JournalEntriesButton";
import LocationQuickAdd from "./LocationQuickAdd";
import { formatDateTimeInTimezone } from "../utils/timezone";

interface LodgingManagerProps {
  tripId: number;
  locations: Location[];
  tripTimezone?: string | null;
  onUpdate?: () => void;
}

export default function LodgingManager({
  tripId,
  locations,
  tripTimezone,
  onUpdate,
}: LodgingManagerProps) {
  const [lodgings, setLodgings] = useState<Lodging[]>([]);
  const [showForm, setShowForm] = useState(false);
  const [editingId, setEditingId] = useState<number | null>(null);
  const [showLocationQuickAdd, setShowLocationQuickAdd] = useState(false);
  const [localLocations, setLocalLocations] = useState<Location[]>(locations);
  const typeFieldId = useId();
  const nameFieldId = useId();
  const locationFieldId = useId();
  const addressFieldId = useId();
  const checkInFieldId = useId();
  const checkOutFieldId = useId();
  const timezoneFieldId = useId();
  const confirmationFieldId = useId();
  const bookingUrlFieldId = useId();
  const costFieldId = useId();
  const currencyFieldId = useId();
  const notesFieldId = useId();

  // Form state
  const [type, setType] = useState<LodgingType>("hotel");
  const [name, setName] = useState("");
  const [locationId, setLocationId] = useState<number | undefined>();
  const [address, setAddress] = useState("");
  const [checkInDate, setCheckInDate] = useState("");
  const [checkOutDate, setCheckOutDate] = useState("");
  const [timezone, setTimezone] = useState("");
  const [confirmationNumber, setConfirmationNumber] = useState("");
  const [cost, setCost] = useState("");
  const [currency, setCurrency] = useState("USD");
  const [bookingUrl, setBookingUrl] = useState("");
  const [notes, setNotes] = useState("");

  useEffect(() => {
    loadLodgings();
  }, [tripId]);

  // Sync localLocations with locations prop
  useEffect(() => {
    setLocalLocations(locations);
  }, [locations]);

  const loadLodgings = async () => {
    try {
      const data = await lodgingService.getLodgingByTrip(tripId);
      setLodgings(data);
    } catch (error) {
      toast.error("Failed to load lodging");
    }
  };

  const handleLocationCreated = (locationId: number, locationName: string) => {
    // Add the new location to local state
    const newLocation: Location = {
      id: locationId,
      name: locationName,
      tripId,
      address: null,
      latitude: null,
      longitude: null,
      categoryId: null,
      visitDatetime: null,
      visitDurationMinutes: null,
      notes: null,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };
    setLocalLocations([...localLocations, newLocation]);

    // Select the newly created location
    setLocationId(locationId);

    // Close the quick add UI
    setShowLocationQuickAdd(false);
  };

  const resetForm = () => {
    setType("hotel");
    setName("");
    setLocationId(undefined);
    setAddress("");
    setCheckInDate("");
    setCheckOutDate("");
    setTimezone("");
    setConfirmationNumber("");
    setCost("");
    setCurrency("USD");
    setBookingUrl("");
    setNotes("");
    setEditingId(null);
  };

  const handleEdit = (lodging: Lodging) => {
    setEditingId(lodging.id);
    setType(lodging.type);
    setName(lodging.name);
    setLocationId(lodging.locationId || undefined);
    setAddress(lodging.address || "");
    setCheckInDate(
      lodging.checkInDate
        ? new Date(lodging.checkInDate).toISOString().slice(0, 16)
        : ""
    );
    setCheckOutDate(
      lodging.checkOutDate
        ? new Date(lodging.checkOutDate).toISOString().slice(0, 16)
        : ""
    );
    setTimezone(lodging.timezone || "");
    setConfirmationNumber(lodging.confirmationNumber || "");
    setCost(lodging.cost?.toString() || "");
    setCurrency(lodging.currency || "USD");
    setBookingUrl(lodging.bookingUrl || "");
    setNotes(lodging.notes || "");
    setShowForm(true);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!name.trim()) {
      toast.error("Name is required");
      return;
    }

    try {
      if (editingId) {
        // For updates, send null to clear empty fields
        const updateData = {
          tripId,
          type,
          name,
          locationId,
          address: address || null,
          checkInDate: checkInDate
            ? new Date(checkInDate).toISOString()
            : null,
          checkOutDate: checkOutDate
            ? new Date(checkOutDate).toISOString()
            : null,
          timezone: timezone || null,
          confirmationNumber: confirmationNumber || null,
          cost: cost ? parseFloat(cost) : null,
          currency: currency || null,
          bookingUrl: bookingUrl || null,
          notes: notes || null,
        };
        await lodgingService.updateLodging(editingId, updateData);
        toast.success("Lodging updated");
      } else {
        // For creates, use undefined to omit optional fields
        const createData = {
          tripId,
          type,
          name,
          locationId,
          address: address || undefined,
          checkInDate: checkInDate
            ? new Date(checkInDate).toISOString()
            : undefined,
          checkOutDate: checkOutDate
            ? new Date(checkOutDate).toISOString()
            : undefined,
          timezone: timezone || undefined,
          confirmationNumber: confirmationNumber || undefined,
          cost: cost ? parseFloat(cost) : undefined,
          currency: currency || undefined,
          bookingUrl: bookingUrl || undefined,
          notes: notes || undefined,
        };
        await lodgingService.createLodging(createData);
        toast.success("Lodging added");
      }

      resetForm();
      setShowForm(false);
      loadLodgings();
      onUpdate?.(); // Notify parent to refresh counts
    } catch (error) {
      toast.error("Failed to save lodging");
    }
  };

  const handleDelete = async (id: number) => {
    if (!confirm("Delete this lodging?")) return;

    try {
      await lodgingService.deleteLodging(id);
      toast.success("Lodging deleted");
      loadLodgings();
      onUpdate?.(); // Notify parent to refresh counts
    } catch (error) {
      toast.error("Failed to delete lodging");
    }
  };

  const getTypeIcon = (type: LodgingType) => {
    switch (type) {
      case "hotel":
        return "🏨";
      case "hostel":
        return "🏠";
      case "airbnb":
        return "🏡";
      case "vacation_rental":
        return "🏘️";
      case "camping":
        return "⛺";
      case "resort":
        return "🏖️";
      case "motel":
        return "🛏️";
      case "bed_and_breakfast":
        return "🏡";
      case "apartment":
        return "🏢";
      case "friends_family":
        return "👨‍👩‍👧‍👦";
      default:
        return "🏠";
    }
  };

  const formatTypeLabel = (type: LodgingType) => {
    return type
      .split("_")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(" ");
  };

  const formatDate = (
    date: string | null,
    timezone?: string | null
  ) => {
    return formatDateTimeInTimezone(
      date,
      timezone,
      tripTimezone,
      { includeTimezone: true, format: 'short' }
    );
  };

  const calculateNights = (checkIn: string | null, checkOut: string | null) => {
    if (!checkIn || !checkOut) return null;
    const start = new Date(checkIn);
    const end = new Date(checkOut);
    const nights = Math.ceil(
      (end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)
    );
    return nights > 0 ? nights : null;
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <h2 className="text-2xl font-bold text-gray-900 dark:text-white">
          Lodging
        </h2>
        <button
          onClick={() => {
            resetForm();
            setShowForm(!showForm);
          }}
          className="btn btn-primary"
        >
          {showForm ? "Cancel" : "+ Add Lodging"}
        </button>
      </div>

      {showForm && (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-6">
          <h3 className="text-lg font-semibold mb-4">
            {editingId ? "Edit Lodging" : "Add Lodging"}
          </h3>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label
                  htmlFor={typeFieldId}
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Type *
                </label>
                <select
                  id={typeFieldId}
                  value={type}
                  onChange={(e) => setType(e.target.value as LodgingType)}
                  className="input"
                  required
                >
                  <option value="hotel">Hotel</option>
                  <option value="hostel">Hostel</option>
                  <option value="airbnb">Airbnb</option>
                  <option value="vacation_rental">Vacation Rental</option>
                  <option value="camping">Camping</option>
                  <option value="resort">Resort</option>
                  <option value="motel">Motel</option>
                  <option value="bed_and_breakfast">Bed & Breakfast</option>
                  <option value="apartment">Apartment</option>
                  <option value="friends_family">Friends / Family</option>
                  <option value="other">Other</option>
                </select>
              </div>

              <div>
                <label
                  htmlFor={nameFieldId}
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Name *
                </label>
                <input
                  type="text"
                  id={nameFieldId}
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  className="input"
                  placeholder="Hilton Downtown"
                  required
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <div className="flex items-center justify-between mb-1">
                  <label
                    htmlFor={locationFieldId}
                    className="block text-sm font-medium text-gray-700 dark:text-gray-300"
                  >
                    Location
                  </label>
                  <button
                    type="button"
                    onClick={() => setShowLocationQuickAdd(!showLocationQuickAdd)}
                    className="text-xs text-blue-600 dark:text-blue-400 hover:underline"
                  >
                    {showLocationQuickAdd ? 'Hide' : '+ Add New Location'}
                  </button>
                </div>

                {showLocationQuickAdd && (
                  <div className="mb-3">
                    <LocationQuickAdd
                      tripId={tripId}
                      onLocationCreated={handleLocationCreated}
                      onCancel={() => setShowLocationQuickAdd(false)}
                    />
                  </div>
                )}

                <select
                  id={locationFieldId}
                  value={locationId || ""}
                  onChange={(e) =>
                    setLocationId(
                      e.target.value ? parseInt(e.target.value) : undefined
                    )
                  }
                  className="input"
                >
                  <option value="">Select location</option>
                  {localLocations.map((loc) => (
                    <option key={loc.id} value={loc.id}>
                      {loc.name}
                    </option>
                  ))}
                </select>
              </div>

              <div>
                <label
                  htmlFor={addressFieldId}
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Address
                </label>
                <input
                  type="text"
                  id={addressFieldId}
                  value={address}
                  onChange={(e) => setAddress(e.target.value)}
                  className="input"
                  placeholder="123 Main St"
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label
                  htmlFor={checkInFieldId}
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Check-in Date
                </label>
                <input
                  type="datetime-local"
                  id={checkInFieldId}
                  value={checkInDate}
                  onChange={(e) => setCheckInDate(e.target.value)}
                  className="input"
                />
              </div>

              <div>
                <label
                  htmlFor={checkOutFieldId}
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Check-out Date
                </label>
                <input
                  type="datetime-local"
                  id={checkOutFieldId}
                  value={checkOutDate}
                  onChange={(e) => setCheckOutDate(e.target.value)}
                  className="input"
                />
              </div>
            </div>

            <div>
              <label htmlFor={timezoneFieldId} className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                Timezone
              </label>
              <select
                id={timezoneFieldId}
                value={timezone}
                onChange={(e) => setTimezone(e.target.value)}
                className="input"
              >
                <option value="">Use trip timezone</option>
                <option value="UTC">UTC (Coordinated Universal Time)</option>
                <option value="America/New_York">Eastern Time (US & Canada)</option>
                <option value="America/Chicago">Central Time (US & Canada)</option>
                <option value="America/Denver">Mountain Time (US & Canada)</option>
                <option value="America/Los_Angeles">Pacific Time (US & Canada)</option>
                <option value="America/Anchorage">Alaska</option>
                <option value="Pacific/Honolulu">Hawaii</option>
                <option value="Europe/London">London</option>
                <option value="Europe/Paris">Paris</option>
                <option value="Europe/Berlin">Berlin</option>
                <option value="Asia/Tokyo">Tokyo</option>
                <option value="Asia/Shanghai">Shanghai</option>
                <option value="Asia/Dubai">Dubai</option>
                <option value="Australia/Sydney">Sydney</option>
                <option value="Pacific/Auckland">Auckland</option>
              </select>
              <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                If not specified, the trip's timezone will be used
              </p>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label
                  htmlFor={confirmationFieldId}
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Confirmation Number
                </label>
                <input
                  type="text"
                  id={confirmationFieldId}
                  value={confirmationNumber}
                  onChange={(e) => setConfirmationNumber(e.target.value)}
                  className="input"
                  placeholder="ABC123456"
                />
              </div>

              <div>
                <label
                  htmlFor={bookingUrlFieldId}
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Booking URL
                </label>
                <input
                  type="url"
                  id={bookingUrlFieldId}
                  value={bookingUrl}
                  onChange={(e) => setBookingUrl(e.target.value)}
                  className="input"
                  placeholder="https://..."
                />
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label
                  htmlFor={costFieldId}
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Cost
                </label>
                <input
                  type="number"
                  step="0.01"
                  id={costFieldId}
                  value={cost}
                  onChange={(e) => setCost(e.target.value)}
                  className="input"
                  placeholder="0.00"
                />
              </div>

              <div>
                <label
                  htmlFor={currencyFieldId}
                  className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
                >
                  Currency
                </label>
                <input
                  type="text"
                  id={currencyFieldId}
                  value={currency}
                  onChange={(e) => setCurrency(e.target.value)}
                  className="input"
                  maxLength={3}
                  placeholder="USD"
                />
              </div>
            </div>

            <div>
              <label
                htmlFor={notesFieldId}
                className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1"
              >
                Notes
              </label>
              <textarea
                id={notesFieldId}
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                rows={3}
                className="input"
                placeholder="Additional notes..."
              />
            </div>

            <button type="submit" className="btn btn-primary">
              {editingId ? "Update" : "Add"} Lodging
            </button>
          </form>
        </div>
      )}

      {lodgings.length === 0 ? (
        <div className="text-center py-12 bg-white dark:bg-gray-800 rounded-lg shadow">
          <p className="text-gray-500 dark:text-gray-400">
            No lodging added yet. Click "Add Lodging" to get started!
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          {lodgings.map((lodging) => {
            const nights = calculateNights(
              lodging.checkInDate,
              lodging.checkOutDate
            );
            return (
              <div
                key={lodging.id}
                className="bg-white dark:bg-gray-800 rounded-lg shadow p-6 hover:shadow-lg transition-shadow"
              >
                <div className="flex items-start justify-between">
                  <div className="flex items-start space-x-4 flex-1">
                    <div className="text-4xl">{getTypeIcon(lodging.type)}</div>
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <h3 className="text-lg font-semibold">
                          {lodging.name}
                        </h3>
                        <span className="text-sm text-gray-600 dark:text-gray-400">
                          • {formatTypeLabel(lodging.type)}
                        </span>
                      </div>

                      {lodging.address && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                          📍 {lodging.address}
                        </p>
                      )}

                      {lodging.location && (
                        <div className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                          <p className="font-medium">📍 {lodging.location.name}</p>
                          {lodging.location.address && (
                            <p className="text-xs ml-5">{lodging.location.address}</p>
                          )}
                        </div>
                      )}

                      <div className="grid grid-cols-2 gap-4 mb-3">
                        <div>
                          <div className="text-xs text-gray-500 dark:text-gray-400 uppercase">
                            Check-in
                          </div>
                          <div className="font-medium">
                            {formatDate(lodging.checkInDate, lodging.timezone)}
                          </div>
                        </div>
                        <div>
                          <div className="text-xs text-gray-500 dark:text-gray-400 uppercase">
                            Check-out
                          </div>
                          <div className="font-medium">
                            {formatDate(lodging.checkOutDate, lodging.timezone)}
                          </div>
                        </div>
                      </div>

                      {nights && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                          {nights} {nights === 1 ? "night" : "nights"}
                        </p>
                      )}

                      {lodging.timezone && (
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-2">
                          🌍 Timezone: {lodging.timezone}
                        </p>
                      )}

                      <div className="flex flex-wrap gap-4 text-sm text-gray-600 dark:text-gray-400">
                        {lodging.confirmationNumber && (
                          <span>
                            Confirmation: {lodging.confirmationNumber}
                          </span>
                        )}
                        {lodging.cost !== null && (
                          <span>
                            Cost: {lodging.currency} {lodging.cost.toFixed(2)}
                          </span>
                        )}
                        {lodging.bookingUrl && (
                          <a
                            href={lodging.bookingUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="text-blue-600 dark:text-blue-400 hover:underline"
                          >
                            View Booking
                          </a>
                        )}
                      </div>

                      {lodging.notes && (
                        <p className="text-sm text-gray-700 mt-2">
                          {lodging.notes}
                        </p>
                      )}

                      <AssociatedAlbums
                        albums={lodging.photoAlbums}
                        tripId={tripId}
                      />
                    </div>
                  </div>

                  <div className="flex gap-2 items-center">
                    <JournalEntriesButton
                      journalEntries={lodging.journalAssignments}
                      tripId={tripId}
                    />
                    <button
                      onClick={() => handleEdit(lodging)}
                      className="btn btn-secondary"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDelete(lodging.id)}
                      className="btn btn-danger"
                    >
                      Delete
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
}
